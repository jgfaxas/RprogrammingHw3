if (!any(outcomes==c("heart attack", "heart failure", "pneumonia"))){
stop(paste("invalid outcome"))
}
print("sucess!")
}
best("AL","heart failure")
best("AL","heart failur")
best("LL","heart failure")
data=outcome
colnames(data)
min(data[,13])
match(min(data[,13]),data[,13])
data$Hospital.Name[291]
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-OutcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index]),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index]),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
traceback
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
print(outcomeIndex)
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index]),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
print(index)
minFound<-match(min(data[,index]),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
min(data[,11])
head(data[,11])
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
print(index)
minFound<-match(min(data[,index]),data[,index],rm.na=TRUE)
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
print(index)
minFound<-match(min(data[,index]),data[,index],na.rm=TRUE)
data$Hospital.Name[minFound]
}
}
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
print(index)
minFound<-match(min(data[,index],data[,index],na.rm=TRUE))
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
min(data[,11],data[,11],na.rm=TRUE)
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
index<-as.numeric(index)
minFound<-match(min(data[,index],data[,index],na.rm=TRUE))
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
index<-as.numeric(index)
minFound<-min(data[,index],data[,index],na.rm=TRUE)
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index]),data[,index],na.rm=TRUE)
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index]),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index],,na.rm=TRUE),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index],na.rm=TRUE),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
min(data[,11],na.rm=TRUE)
min(data[,11])
min(data[,11],na.rm=TRUE)
match(min(data[,11],na.rm=TRUE),data[,11])
data$Hospital.Name[2850]
data[,11]
class(data[,11])
class(data[,17])
class(data[,23])
colnames(data)
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index],na.rm=TRUE),data[,index])
data$Hospital.Name[minFound]
}
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(data[,index],na.rm=TRUE),data[,index])
data$Hospital.Name[minFound]
}
best("TX", "heart attack")
best("TX", "heart attack")
split(data,data$State)
split(data,data$State=="TX")
pruebaData=split(data,data$State=="TX")
str(pruebaData)
ncol(pruebaData)
head(pruebaData)
data$State=as.factor(data$State)
pruebaData=split(data,data$State=="TX")
str(pruebaData)
ncol(pruebaData)
?split
pruebaData=split(data,data$State)
head(pruebaData)
data$State
pruebaData<-subset(data, State=="TX")
pruebaData
str(pruebaData)
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
dataByState$Hospital.Name[minFound]
}
best("TX", "heart attack")
dataByState$Hospital.Name[minFound]
data$Hospital.Name[99]
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
invisible(minFound)
dataByState$Hospital.Name[minFound]
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
invisible(minFound)
print(dataByState$Hospital.Name[minFound]    )
}
best("TX", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
output<-dataByState$Hospital.Name[minFound]
}
best("TX", "heart failure")
output
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
output<-dataByState$Hospital.Name[minFound]
}
best("TX", "heart attack")
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
output<-dataByState$Hospital.Name[minFound]
print(output)
}
best("TX", "heart attack")
data$Hospital.Name[550]
data$Hospital.Name[41]
data$Hospital.Name[49]
pruebaData=subset(data,State=="TX")
best("AL", "heart attack")
##Programming assiment 3
## Function best()
## input: state, outcome // output: hospital name
## This function returns the hospital name of the "best" 30-days mortality rate
## hostpital. This ranking is given for the input state.
##
best<- function (state,outcome) {
data<- read.csv("outcome-of-care-measures.csv")
data[,11]<- as.numeric(data[,11])
data[,17]<- as.numeric(data[,17])
data[,23]<- as.numeric(data[,23])
outcomeList=c("heart attack", "heart failure", "pneumonia") #valid outcome list
if (!(state %in% data$State)) {
stop("invalid state")
}
if (!any(outcome==outcomeList)){
stop("invalid outcome")
}
dataByState= subset(data,State==state)
outcomeIndex <- c(11,17,23) #column index for the 30 day mortality rate
index<-outcomeIndex[outcome==outcomeList]
minFound<-match(min(dataByState[,index],na.rm=TRUE),dataByState[,index])
print(as.character(dataByState$Hospital.Name[minFound]))
}
best("AL", "heart attack")
best("TX", "heart attack")
